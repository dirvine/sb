name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.6)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v5
      
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      
      - name: Generate changelog
        id: changelog
        run: |
          echo "# Release v${{ steps.get_version.outputs.version }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          if [ -f CHANGELOG.md ]; then
            # Extract the latest version section from CHANGELOG.md
            awk '/^## \[.*\]/{if(p) exit; p=1; next} p' CHANGELOG.md >> RELEASE_NOTES.md
          else
            echo "See commit history for changes." >> RELEASE_NOTES.md
          fi
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false

  build-binaries:
    name: Build Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: sb
            asset_name: sb-linux-amd64
          
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: sb
            asset_name: sb-macos-amd64
    
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        shell: bash
      
      - name: Strip binary
        run: strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}
      
      - name: Create archive
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
        shell: bash
      
      - name: Upload binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip

